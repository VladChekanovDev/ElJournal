// <auto-generated />
using System;
using ElJournal.Other;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ElJournal.Migrations
{
    [DbContext(typeof(ElJournalDbContext))]
    [Migration("20210506064110_AddedLessons")]
    partial class AddedLessons
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("ElJournal.Entities.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("AdminID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("ElJournal.Entities.Group", b =>
                {
                    b.Property<int>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Course")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("GroupID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ElJournal.Entities.GroupToSubject", b =>
                {
                    b.Property<int>("GroupToSubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectID")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupToSubjectID");

                    b.HasIndex("GroupID");

                    b.HasIndex("SubjectID");

                    b.ToTable("GroupToSubjects");
                });

            modelBuilder.Entity("ElJournal.Entities.Lesson", b =>
                {
                    b.Property<int>("LessonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("GTSID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GroupToSubjectID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Semester")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Topic")
                        .HasColumnType("TEXT");

                    b.HasKey("LessonID");

                    b.HasIndex("GroupToSubjectID");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("ElJournal.Entities.Mark", b =>
                {
                    b.Property<int>("MarkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkID");

                    b.HasIndex("LessonID");

                    b.HasIndex("StudentID");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("ElJournal.Entities.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.HasKey("StudentID");

                    b.HasIndex("GroupID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ElJournal.Entities.Subject", b =>
                {
                    b.Property<int>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.HasKey("SubjectID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("ElJournal.Entities.Teacher", b =>
                {
                    b.Property<int>("TeacherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ElJournal.Entities.TeacherToSubject", b =>
                {
                    b.Property<int>("TeacherToSubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherToSubjectID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("TeacherID");

                    b.ToTable("TeacherToSubjects");
                });

            modelBuilder.Entity("ElJournal.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserType")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ElJournal.Entities.Admin", b =>
                {
                    b.HasOne("ElJournal.Entities.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("ElJournal.Entities.Admin", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElJournal.Entities.GroupToSubject", b =>
                {
                    b.HasOne("ElJournal.Entities.Group", "Group")
                        .WithMany("GroupToSubjects")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElJournal.Entities.Subject", "Subject")
                        .WithMany("GroupToSubjects")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ElJournal.Entities.Lesson", b =>
                {
                    b.HasOne("ElJournal.Entities.GroupToSubject", "GroupToSubject")
                        .WithMany("Lessons")
                        .HasForeignKey("GroupToSubjectID");

                    b.Navigation("GroupToSubject");
                });

            modelBuilder.Entity("ElJournal.Entities.Mark", b =>
                {
                    b.HasOne("ElJournal.Entities.Lesson", "Lesson")
                        .WithMany("Marks")
                        .HasForeignKey("LessonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElJournal.Entities.Student", "Student")
                        .WithMany("Marks")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ElJournal.Entities.Student", b =>
                {
                    b.HasOne("ElJournal.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ElJournal.Entities.Teacher", b =>
                {
                    b.HasOne("ElJournal.Entities.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("ElJournal.Entities.Teacher", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElJournal.Entities.TeacherToSubject", b =>
                {
                    b.HasOne("ElJournal.Entities.Subject", "Subject")
                        .WithMany("TeacherToSubjects")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElJournal.Entities.Teacher", "Teacher")
                        .WithMany("TeacherToSubjects")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ElJournal.Entities.Group", b =>
                {
                    b.Navigation("GroupToSubjects");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("ElJournal.Entities.GroupToSubject", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("ElJournal.Entities.Lesson", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("ElJournal.Entities.Student", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("ElJournal.Entities.Subject", b =>
                {
                    b.Navigation("GroupToSubjects");

                    b.Navigation("TeacherToSubjects");
                });

            modelBuilder.Entity("ElJournal.Entities.Teacher", b =>
                {
                    b.Navigation("TeacherToSubjects");
                });

            modelBuilder.Entity("ElJournal.Entities.User", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Teacher")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
